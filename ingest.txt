Directory structure:
└── onurtaskinn-github_workspace/
    ├── README.md
    ├── background.js
    ├── contentScript.js
    ├── manifest.json
    ├── package.json
    ├── popup.html
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── webpack.config.js
    ├── icons/
    └── src/
        ├── .DS_Store
        ├── components/
        │   ├── ExtensionUI.js
        │   ├── .DS_Store
        │   ├── common/
        │   │   ├── Button.jsx
        │   │   ├── Card.jsx
        │   │   ├── EmptyState.jsx
        │   │   ├── Input.jsx
        │   │   ├── Modal.jsx
        │   │   └── Notification.jsx
        │   ├── features/
        │   │   ├── auth/
        │   │   │   ├── AuthScreen.jsx
        │   │   │   └── PinModal.jsx
        │   │   ├── encryption/
        │   │   │   └── EncryptionTab.jsx
        │   │   ├── gmail/
        │   │   │   ├── ComposeModal.jsx
        │   │   │   └── GmailTab.jsx
        │   │   ├── server/
        │   │   │   ├── ServerTab.jsx
        │   │   │   └── serverCommunication.js
        │   │   ├── settings/
        │   │   │   └── SettingsTab.jsx
        │   │   └── signing/
        │   │       └── SigningTab.jsx
        │   └── layout/
        │       ├── Header.jsx
        │       └── TabNavigation.jsx
        ├── contexts/
        │   ├── AuthContext.jsx
        │   ├── NotificationContext.jsx
        │   └── ThemeContext.jsx
        ├── hooks/
        │   ├── useEncryption.js
        │   ├── useFileSelection.js
        │   ├── useGmail.js
        │   ├── useNotification.js
        │   └── useSigning.js
        ├── pages/
        │   └── Popup.js
        ├── styles/
        │   └── tailwind.css
        └── utils/
            └── browserApi.js


Files Content:

================================================
File: README.md
================================================
# 1. Getting Started

## Overview & Requirements

### Description
E-SBSL is a Chrome extension that provides secure document operations through e-signature integration. It enables users to sign, encrypt, and verify documents using USB-based smart cards.


## Build & Installation

### Development Build
1. Clone the repository
2. Install dependencies:
   ```bash
   npm install
   ```
### Build
1. Create production build:
   ```bash
   npm run build
   ```
2. The build output will be in the `dist` directory

### Extension Installation
1. Open Chrome browser
2. Navigate to `chrome://extensions/`
3. Enable "Developer mode"
4. Click "Load unpacked"
5. Select the `dist` directory

## Native Host Setup

### Configuration
1. Create native messaging host manifest at:
   - Windows: `%LOCALAPPDATA%\Google\Chrome\NativeMessagingHosts\`
   - Linux: `~/.config/google-chrome/NativeMessagingHosts/`
   - macOS: `~/Library/Application Support/Google/Chrome/NativeMessagingHosts/`

2. Add manifest JSON:
   ```json
   {
     "name": "com.esbsl.native_host",
     "description": "E-SBSL Native Host",
     "path": "[ABSOLUTE_PATH_TO_NATIVE_HOST]",
     "type": "stdio",
     "allowed_origins": [
       "chrome-extension://[EXTENSION_ID]/"
     ]
   }
   ```

### Verification
1. Install the extension
2. Open extension popup
3. Attempt to connect with smart card
4. Check Chrome's console for connection logs

## Troubleshooting
- If native messaging fails, verify the manifest path and permissions
- For build errors, ensure all dependencies are correctly installed
- Extension ID must match between native host manifest and Chrome







# 2. Architecture Overview

## Project Structure
```
src/
├── components/
│   ├── common/                 # Reusable UI components
│   │   ├── Modal.jsx
│   │   └── Notification.jsx
│   ├── features/              # Feature-specific components
│   │   ├── auth/             # Authentication related
│   │   ├── encryption/       # Encryption related
│   │   ├── settings/        # Settings related
│   │   └── signing/         # Document signing related
│   └── ExtensionUI.js        # Main UI component
├── contexts/                  # React Context providers
├── hooks/                    # Custom React hooks
├── pages/                    # Entry points
└── utils/                    # Utility functions
```

## Key Components

### Core Components
1. **ExtensionUI** (`ExtensionUI.js`)
   - Main container component
   - Manages tab navigation
   - Handles authentication state
   - Implements dark/light mode

2. **Feature Components**
   - `AuthScreen`: Initial login interface
   - `SigningTab`: Document signing operations
   - `EncryptionTab`: Document encryption operations
   - `SettingsTab`: User preferences and configuration

3. **Common Components**
   - `Modal`: Reusable modal dialog
   - `Notification`: Toast notification system

### Browser Integration
- `browserApi.js`: Native messaging interface
  - Handles communication with native host
  - Manages document operations
  - Processes authentication requests

## State Management

### Context Providers
1. **AuthContext**
   ```javascript
   {
     isAuthenticated: boolean,
     showPinModal: boolean,
     pin: string,
     handlePinSubmit: () => void,
     handleLogout: () => void
   }
   ```

2. **NotificationContext**
   ```javascript
   {
     notification: { message: string, type: string },
     showNotification: (message, type) => void
   }
   ```

3. **ThemeContext**
   ```javascript
   {
     darkMode: boolean,
     toggleDarkMode: () => void
   }
   ```

### Custom Hooks
1. **useEncryption**
   - Manages document encryption/decryption
   - Handles file selection
   - Processes encryption operations

2. **useSigning**
   - Manages document signing
   - Handles signature verification
   - Processes signing operations

3. **useFileSelection**
   - Common file selection functionality
   - Handles file input operations

### Data Flow
1. User actions trigger hook methods
2. Hooks communicate with native host via browserApi
3. Responses update context state
4. UI components react to state changes






# 3. Core Features

## Authentication

### Login Flow
1. User initiates login through AuthScreen
2. PinModal component activates
3. User enters PIN for smart card
4. PIN verification process:
   ```javascript
   // Authentication request
   const response = await browserApi.verifyPIN(pin);
   if (response.success) {
     setIsAuthenticated(true);
   }
   ```

### Session Management
- Authentication state maintained in AuthContext
- Regular re-authentication through background checks
- Secure logout procedure clearing sensitive data

## Document Operations

### Document Signing
1. **Signing Process**
   ```javascript
   const handleSignDocument = async (file) => {
     const response = await browserApi.signDocument(file.name);
     // Process response and show notification
   };
   ```

2. **Signature Verification**
   ```javascript
   const handleVerifySignature = async (file, signature) => {
     const response = await browserApi.verifySignature(
       file.name, 
       signature.name
     );
     // Verify signature and show result
   };
   ```

### Encryption Operations
1. **Document Encryption**
   ```javascript
   const handleEncrypt = async (file) => {
     const response = await browserApi.encryptData(file.name);
     // Process encrypted data
   };
   ```

2. **Document Decryption**
   ```javascript
   const handleDecrypt = async (file, keyFile) => {
     const response = await browserApi.decryptData(
       file.name, 
       keyFile.name
     );
     // Process decrypted data
   };
   ```

## Extension APIs

### Native Messaging Interface
```javascript
const browserApi = {
  sendMessageToNative: async (module, method, params = {}) => {
    const message = {
      module,
      method,
      params
    };
    return await chrome.runtime.sendNativeMessage(
      'com.esbsl.native_host',
      message
    );
  }
};
```

### Available API Methods
1. **Authentication**
   - `verifyPIN(pin)`
   - Response: `{ success: boolean, message: string }`

2. **Document Signing**
   - `signDocument(filename)`
   - `verifySignature(filename, signature)`
   - Response: `{ success: boolean, data?: string }`

3. **Encryption**
   - `encryptData(filename)`
   - `decryptData(filename, keyfile)`
   - Response: `{ success: boolean, data?: string }`



================================================
File: background.js
================================================
console.log('E-SBSL Background script loaded');

const browserApi = (() => {
  let port = null;

  // Function to initialize the connection
  const connectToNativeHost = () => {
      if (!port) {
          port = chrome.runtime.connectNative('com.esbsl.native_host');

          port.onMessage.addListener((message) => {
              console.log('Received from native:', message);
          });

          port.onDisconnect.addListener(() => {
              console.warn('Native host disconnected');
              port = null; // Reset the port when disconnected
          });
      }
  };
  return {
    sendMessageToNative: async (module, method, params = {}) => {
        try {
            console.log(`Sending message to native host - Module: ${module}, Method: ${method}`);
            
            const message = {
                module,
                method,
                params
            };

            connectToNativeHost(); // Ensure connection is open

            return new Promise((resolve, reject) => {
                if (port) {
                    port.postMessage(message);
                    port.onMessage.addListener(function listener(response) {
                        console.log('Native host response:', response);
                        port.onMessage.removeListener(listener); // Remove listener after response
                        resolve(response);
                    });
                } else {
                    reject(new Error('Failed to connect to native host'));
                }
            });
        } catch (error) {
            console.error('Native message error:', error);
            throw error;
        }
    },

    verifyPIN: async (pin) => {
      return await browserApi.sendMessageToNative(
        'auth',
        'login',
        { pin }
      );
    },

    logout: async () => {
      return await browserApi.sendMessageToNative(
        'auth',
        'logout'
      );
    },
  
    signDocument: async (filename) => {
      return await browserApi.sendMessageToNative(
        'sign',
        'sign_method',
        {filename}
      );
    },
  
    encryptData: async (filename) => {
      return await browserApi.sendMessageToNative(
        'encrypt',
        'encrypt_method',
        {filename}
      );
    },

    decryptData: async (filename, keyfile) => {
        return await browserApi.sendMessageToNative(
          'encrypt',
          'decrypt_method',
          {filename, keyfile}
        );
    },

    verifySignature: async (filename, signature) => {
        return await browserApi.sendMessageToNative(
            'sign',
            'verify_method',
            {filename, signature}
        );
    },

    savePubkey: async (file) => {
        return await browserApi.sendMessageToNative(
            'save',
            'pub_key',
            {file}
        );
    },

    encryptWithPubkey: async (filename, keypath) => {
        return await browserApi.sendMessageToNative(
            'encrypt',
            'encrypt_method_pk',
            {filename, keypath}
        );
    }

  };
})();



// Gmail OAuth authentication
function authenticate() {
  return new Promise((resolve, reject) => {
    console.log('Starting Gmail authentication process');
    
    chrome.identity.getAuthToken({ interactive: true }, function(token) {
      if (chrome.runtime.lastError) {
        console.error('Authentication error:', chrome.runtime.lastError);
        reject(chrome.runtime.lastError);
        return;
      }
      
      if (token) {
        console.log('Authentication successful, token received');
        chrome.storage.local.set({ 'authToken': token }, function() {
          console.log('Authentication token saved successfully');
          resolve(token);
        });
      } else {
        console.error('No authentication token received');
        reject(new Error('Failed to obtain authentication token'));
      }
    });
  });
}

// Get stored token or authenticate if needed
function getStoredToken() {
  return new Promise((resolve, reject) => {
    chrome.storage.local.get('authToken', function(data) {
      if (chrome.runtime.lastError) {
        console.error('Error retrieving stored token:', chrome.runtime.lastError);
        reject(chrome.runtime.lastError);
        return;
      }
      
      if (data.authToken) {
        console.log('Using stored authentication token');
        resolve(data.authToken);
      } else {
        console.log('No stored token found, authenticating...');
        authenticate()
          .then(resolve)
          .catch(reject);
      }
    });
  });
}

// Send email using Gmail API
async function sendEmail(to, subject, body) {
  console.log('Sending email to:', to);
  
  try {
    const token = await getStoredToken();
    console.log('Got authentication token for email sending');
    
    const email = [
      'Content-Type: text/plain; charset="UTF-8"',
      'MIME-Version: 1.0',
      'Content-Transfer-Encoding: 7bit',
      `To: ${to}`,
      `Subject: ${subject}`,
      '',
      body
    ].join('\r\n');
    
    const encodedEmail = btoa(unescape(encodeURIComponent(email)))
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=+$/, '');
    
    console.log('Sending request to Gmail API');
    
    const response = await fetch('https://www.googleapis.com/gmail/v1/users/me/messages/send', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        'raw': encodedEmail
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gmail API error response:', errorText);
      throw new Error(`Email sending failed: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    console.log('Email sent successfully:', result);
    return result;
  } catch (error) {
    console.error('Error sending email:', error);
    throw error;
  }
}

// Listen for messages from content scripts and popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('Background script received message:', request.action);
  
  
  // Gmail authentication handler
  if (request.action === 'authenticate') {
    authenticate()
      .then(token => {
        console.log('Authentication successful');
        sendResponse({ success: true, token });
      })
      .catch(error => {
        console.error('Authentication failed:', error);
        sendResponse({ success: false, error: error.message });
      });
    return true;
  }
  
  // Email sending handler
  if (request.action === 'sendEmail') {
    console.log('Processing sendEmail request:', request);
    
    sendEmail(request.to, request.subject, request.body)
      .then(result => {
        console.log('Email sent successfully');
        sendResponse({ success: true, result });
      })
      .catch(error => {
        console.error('Email sending failed:', error);
        sendResponse({ success: false, error: error.message });
      });
    return true; 
  }
});


chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'openSecureCompose') {
    console.log('Received request to open secure compose from Gmail');
    
    chrome.action.openPopup().then(() => {
      setTimeout(() => {
        chrome.runtime.sendMessage({ 
          action: 'openGmailCompose',
          source: 'gmail'
        });
      }, 500); 
    }).catch(error => {
      console.error('Error opening popup:', error);
      
      chrome.tabs.create({
        url: chrome.runtime.getURL('popup.html?action=composeEmail')
      });
    });
    
    sendResponse({ success: true });
    return true;
  }
});


////////////////////////

let lastCallTime = Date.now();
let timeOutTimeMin = 1;
let timeoutTimeMsec = timeOutTimeMin * 60 * 1000;
let timeoutReached = false;

// Function to reset the timer
const resetTimer = () => {
  lastCallTime = Date.now();
  timeoutReached = false; 
  console.log('Timer reset');
};

const checkTimeout = async () => {
  const currentTime = Date.now();
  if (currentTime - lastCallTime >= timeoutTimeMsec && !timeoutReached) {
    console.log('Timeout reached');
    timeoutReached = true;
    chrome.runtime.sendMessage({ timeoutReached: true });

    const response = await browserApi.logout();
    if (response.success) {
      showNotification('Logged out successfully', 'info');
    }
    else{
      console.log("Failed to logout: " + response);
    }
  }
};

setInterval(checkTimeout, 10000);

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.action === 'resetTimer') {
    resetTimer();
    sendResponse({ status: 'Timer reset' });
  }
  else if (message.action === 'updateTimeout') {
    timeOutTimeMin = message.timeoutDuration ;
    timeoutTimeMsec = timeOutTimeMin * 60 * 1000;
    console.log(`Timeout duration updated to ${timeOutTimeMin} minutes`);
    sendResponse({ status: 'Timeout updated' });
  }
});




================================================
File: contentScript.js
================================================
// Original content script code
console.log('Content script loaded');

// Gmail integration code
(function() {
  let buttonInjected = false;
  

  function injectComposeButton() {
    if (!window.location.href.includes('mail.google.com')) {
      return;
    }
    if (buttonInjected) return;
    
    console.log('Trying to inject secure compose button into Gmail');
    
    const gmailSelectors = [
      '.T-I.T-I-KE.L3', 
      '[role="button"][gh="cm"]',
      '[role="toolbar"] .z0', 
      '.z0 .L3' 
    ];
    
    let gmailComposeButton = null;
    
    for (const selector of gmailSelectors) {
      try {
        const element = document.querySelector(selector);
        if (element) {
          console.log('Found Gmail compose button with selector:', selector);
          gmailComposeButton = element;
          break;
        }
      } catch (error) {
        console.error('Error with selector:', selector, error);
      }
    }
    
    if (!gmailComposeButton) {
      console.log('Gmail compose button not found, will retry later');
      return;
    }
    
    // Create our secure compose button
    try {
        const secureButton = document.createElement('div');
        secureButton.className = 'e-sbsl-secure-compose-button';
        secureButton.style.display = 'inline-block';
        secureButton.style.margin = '0 5px';
        console.log("url : ", chrome.runtime.getURL('icons/icon16.png'));
        
        secureButton.innerHTML = `
        <button style="
          background-color: #0b57d0; 
          color: white; 
          border: none; 
          border-radius: 24px; 
          padding: 8px 16px; 
          font-size: 14px;
          font-family: 'Google Sans', Roboto, Arial, sans-serif;
          font-weight: 500;
          letter-spacing: 0.25px;
          height: 36px;
          cursor: pointer; 
          display: flex; 
          align-items: center;
          justify-content: center;
          min-width: 112px;
          text-transform: none;
          outline: none;
          box-shadow: none;
        ">
          <span style="white-space: nowrap;">Secure Email</span>
        </button>
      `;     
      
      secureButton.addEventListener('click', () => {
        console.log('Secure compose button clicked');
        chrome.runtime.sendMessage({ 
          action: 'openSecureCompose'
        });
      });
      
      gmailComposeButton.parentNode.insertBefore(secureButton, gmailComposeButton.nextSibling);
      console.log('Secure compose button injected successfully');
      buttonInjected = true;
    } catch (error) {
      console.error('Error injecting secure compose button:', error);
    }
  }
  
  setTimeout(injectComposeButton, 2000);
  
  setInterval(() => {
    if (!buttonInjected && window.location.href.includes('mail.google.com')) {
      injectComposeButton();
    }
  }, 5000);
  
  const observer = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type === 'childList' && !buttonInjected) {
        injectComposeButton();
      }
    }
  });
  
  observer.observe(document.body, { 
    childList: true, 
    subtree: true 
  });
  
  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    if (request.action === 'checkGmailButton') {
      sendResponse({ injected: buttonInjected });
    }
  });
})();


================================================
File: manifest.json
================================================
{
  "manifest_version": 3,
  "name": "E-SBSL Security Extension",
  "version": "1.0",
  "description": "E-Signature Based Security Library and Services Chrome Extension with Gmail Integration",
  "permissions": [
    "storage",
    "activeTab",
    "scripting",
    "nativeMessaging",
    "identity"
  ],
  "host_permissions": [
    "https://mail.google.com/*",
    "https://*.googleapis.com/*",
    "https://getauth.com.tr/*",
    "http://localhost:3030/*"
  ],
  "action": {
    "default_popup": "popup.html",
    "default_icon": {
      "16": "icons/icon16.png",
      "48": "icons/icon48.png",
      "128": "icons/icon128.png"
    }
  },
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": ["<all_urls>"],
      "js": ["contentScript.js"]
    },
    {
      "matches": ["https://mail.google.com/*"],
      "js": ["contentScript.js"],
      "run_at": "document_idle"
    }
  ],
  "web_accessible_resources": [{
    "resources": ["icons/*"],
    "matches": ["<all_urls>"]
  }],  
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "oauth2": {
    "client_id": "150710762975-dv0nlgevoffaphavnd3969dfcee45g3s.apps.googleusercontent.com",
    "scopes": [
      "https://www.googleapis.com/auth/gmail.compose",
      "https://www.googleapis.com/auth/gmail.readonly"
    ]
  }
}


================================================
File: package.json
================================================
{
  "name": "e-sbsl-extension",
  "version": "1.0.0",
  "scripts": {
    "clean": "rimraf dist",
    "build": "webpack --config webpack.config.js",
    "watch": "webpack --watch --config webpack.config.js"
  },
  
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwindcss": "^3.3.0",
    "@radix-ui/react-tabs": "^1.0.0",
    "lucide-react": "^0.263.1",
    "react-icons": "^4.11.0"
  },
  "devDependencies": {
    "@babel/core": "^7.22.0",
    "@babel/preset-react": "^7.22.0",
    "@babel/preset-env": "^7.22.0",
    "webpack": "^5.85.0",
    "webpack-cli": "^5.1.1",
    "babel-loader": "^9.1.2",
    "css-loader": "^6.8.1",
    "style-loader": "^3.3.3",
    "postcss-loader": "^7.3.3",
    "autoprefixer": "^10.4.14",
    "cross-env": "^7.0.3",
    "zip-webpack-plugin": "^4.0.1",
    "copy-webpack-plugin": "^11.0.0",
    "html-webpack-plugin": "^5.5.0",
    "rimraf": "^5.0.0"
  }
}


================================================
File: popup.html
================================================
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>E-SBSL Extension</title>
    <style>
      body {
        width: 500px;
        height: 600px;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      #root {
        width: 100%;
        height: 100%;
        overflow: hidden;
      }
    </style>
  </head>
  <body>
    <div id="root"></div>
    <script src="dist/popup.js"></script>
  </body>
</html>


================================================
File: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
File: tailwind.config.js
================================================
// tailwind.config.js
module.exports = {
  darkMode: 'class',
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./popup.html"
  ],
  theme: {
    extend: {
      animation: {
        'slideIn': 'slideIn 0.3s ease-out',
        'slideUp': 'slideUp 0.3s ease-out',
        'fadeIn': 'fadeIn 0.2s ease-out',
      },
      keyframes: {
        slideIn: {
          '0%': { transform: 'translateY(-20px)', opacity: 0 },
          '100%': { transform: 'translateY(0)', opacity: 1 },
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: 0 },
          '100%': { transform: 'translateY(0)', opacity: 1 },
        },
        fadeIn: {
          '0%': { opacity: 0 },
          '100%': { opacity: 1 },
        },
      },
      boxShadow: {
        'sm': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
        DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
        'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      }
    },
  },
  plugins: [],
}


================================================
File: webpack.config.js
================================================
const path = require('path');
const CopyPlugin = require('copy-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  mode: 'development',
  devtool: 'cheap-module-source-map',
  entry: {
    popup: './src/pages/Popup.js',
    background: {
      import: './background.js',
      filename: 'background.js'
    },
    contentScript: './contentScript.js',
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name].js',
    clean: true
  },
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: [
              '@babel/preset-env',
              ['@babel/preset-react', { runtime: 'automatic' }]
            ],
          },
        },
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader', 'postcss-loader'],
      },
    ],
  },
  resolve: {
    extensions: ['.js', '.jsx'],
    alias: {
      '@': path.resolve(__dirname, 'src'),
    },
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './popup.html',
      filename: 'popup.html',
      chunks: ['popup']
    }),
    new CopyPlugin({
      patterns: [
        { from: "manifest.json" },
        { from: "icons", to: "icons" }
      ],
    })
  ]
};



================================================
File: src/.DS_Store
================================================
[Non-text file]


================================================
File: src/components/ExtensionUI.js
================================================
// src/components/ExtensionUI.jsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useTheme } from '../contexts/ThemeContext';
import { useNotification } from '../contexts/NotificationContext';
import { Notification } from './common/Notification';
import { AuthScreen } from './features/auth/AuthScreen';
import { PinModal } from './features/auth/PinModal';
import { SigningTab } from './features/signing/SigningTab';
import { EncryptionTab } from './features/encryption/EncryptionTab';
import { SettingsTab } from './features/settings/SettingsTab';
import { GmailTab } from './features/gmail/GmailTab';
import { ServerTab } from './features/server/ServerTab';
import Header from './layout/Header';
import TabNavigation from './layout/TabNavigation';

const ExtensionUI = () => {
  const { isAuthenticated, setShowPinModal, handleLogout } = useAuth();
  const { darkMode } = useTheme();
  const { notification, setNotification } = useNotification();
  const [activeTab, setActiveTab] = useState('Signing');
  const [showingGmailCompose, setShowingGmailCompose] = useState(false);


  // Check if we should directly open Gmail compose
  useEffect(() => {
    if (window.directOpenGmailCompose && isAuthenticated) {
      console.log('Opening Gmail compose tab directly');
      setActiveTab('Gmail');
      if (!showingGmailCompose) {
        setShowingGmailCompose(true);
        window.openGmailComposeDirectly = true;
      }
      window.directOpenGmailCompose = false;
    }
  }, [isAuthenticated, showingGmailCompose]);

  const handleTabChange = (tabName) => {
    setActiveTab(tabName);
  };

  useEffect(() => {
    const handleTimeout = (message) => {
      if (message.timeoutReached) {
        setShowPinModal(true);
      }
    };

    chrome.runtime.onMessage.addListener(handleTimeout);

    return () => {
      chrome.runtime.onMessage.removeListener(handleTimeout);
    };
  }, [setShowPinModal]);

  useEffect(() => {
    if (isAuthenticated) {
      // Define a handler function to reset the timer on user interaction
      const handleUserInteraction = () => {
        chrome.runtime.sendMessage({ action: 'resetTimer' });
      };
      
      // Add event listeners for common user interactions
      window.addEventListener('mousedown', handleUserInteraction);
      window.addEventListener('keydown', handleUserInteraction);
      window.addEventListener('mousemove', handleUserInteraction);
      window.addEventListener('touchstart', handleUserInteraction);
      
      // Clean up function to remove the listeners when component unmounts
      return () => {
        window.removeEventListener('mousedown', handleUserInteraction);
        window.removeEventListener('keydown', handleUserInteraction);
        window.removeEventListener('mousemove', handleUserInteraction);
        window.removeEventListener('touchstart', handleUserInteraction);
      };
    }
  }, [isAuthenticated]); 



  const renderMainScreen = () => (
    <div className="flex flex-col h-full overflow-hidden">
      <Header />
      <TabNavigation activeTab={activeTab} onTabChange={handleTabChange} />
      
      <div className="flex-1 overflow-auto p-4 bg-white dark:bg-gray-800 rounded-lg shadow-sm">
        {activeTab === 'Signing' && <SigningTab />}
        {activeTab === 'Encryption' && <EncryptionTab />}
        {activeTab === 'Gmail' && <GmailTab directCompose={window.openGmailComposeDirectly} onComposeShown={() => {
          window.openGmailComposeDirectly = false;
          setShowingGmailCompose(false);
        }} />}
        {activeTab === 'Server' && <ServerTab />}        
        {activeTab === 'Settings' && <SettingsTab />}        
      </div>
    </div>
  );

  return (
    <div className={`h-[600px] w-[500px] ${darkMode ? 'dark bg-gray-900 text-gray-200' : 'bg-gray-50'} transition-colors duration-200 flex flex-col overflow-hidden`}>
      {notification && (
        <Notification
          message={notification.message}
          type={notification.type}
          onClose={() => setNotification(null)}
        />
      )}
      <PinModal />
      <div className="flex-1 overflow-hidden p-4">
        {!isAuthenticated ? <AuthScreen /> : renderMainScreen()}
      </div>
    </div>
  );
};

export default ExtensionUI;


================================================
File: src/components/.DS_Store
================================================
[Non-text file]


================================================
File: src/components/common/Button.jsx
================================================
import React from 'react';

const Button = ({ 
  variant = "primary", 
  icon, 
  children, 
  className = "",
  fullWidth = false,
  isLoading = false,
  ...props 
}) => {
  const variants = {
    primary: "bg-blue-600 hover:bg-blue-700 text-white",
    secondary: "bg-gray-200 hover:bg-gray-300 text-gray-800 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200",
    danger: "bg-red-600 hover:bg-red-700 text-white",
    success: "bg-green-600 hover:bg-green-700 text-white",
    outline: "border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200"
  };
  
  return (
    <button 
      className={`px-4 py-2 rounded-lg flex items-center justify-center transition-all duration-200 ${variants[variant]} ${fullWidth ? 'w-full' : ''} ${className}`} 
      disabled={isLoading}
      {...props}
    >
      {isLoading ? (
        <span className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></span>
      ) : icon && (
        <span className="mr-2">{icon}</span>
      )}
      {children}
    </button>
  );
};

export default Button;


================================================
File: src/components/common/Card.jsx
================================================
import React from 'react';

const Card = ({ 
  title, 
  icon, 
  description, 
  actionText, 
  onAction,
  className = "" 
}) => {
  return (
    <div className={`p-4 bg-white dark:bg-gray-800 rounded-xl shadow-sm hover:shadow-md transition-shadow border border-gray-100 dark:border-gray-700 ${className}`}>
      <div className="flex items-center mb-3">
        {icon && (
          <div className="p-2 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400">
            {icon}
          </div>
        )}
        <h3 className="ml-2 font-medium text-gray-800 dark:text-gray-200">{title}</h3>
      </div>
      {description && (
        <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">{description}</p>
      )}
      {onAction && (
        <button 
          onClick={onAction} 
          className="text-blue-600 dark:text-blue-400 text-sm font-medium hover:underline flex items-center"
        >
          {actionText}
          <svg className="w-4 h-4 ml-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <path d="M5 12h14M12 5l7 7-7 7" strokeLinecap="round" strokeLinejoin="round" />
          </svg>
        </button>
      )}
    </div>
  );
};

export default Card;




================================================
File: src/components/common/EmptyState.jsx
================================================
import React from 'react';
import Button from './Button';

const EmptyState = ({ 
  icon, 
  title, 
  description, 
  actionText, 
  onAction 
}) => (
  <div className="flex flex-col items-center justify-center py-8 text-center">
    {icon && (
      <div className="p-3 rounded-full bg-gray-100 dark:bg-gray-800 mb-4">
        {icon}
      </div>
    )}
    <h3 className="text-lg font-medium text-gray-800 dark:text-gray-200 mb-2">{title}</h3>
    <p className="text-sm text-gray-500 dark:text-gray-400 max-w-xs mb-4">{description}</p>
    {onAction && (
      <Button onClick={onAction}>
        {actionText}
      </Button>
    )}
  </div>
);

export default EmptyState;




================================================
File: src/components/common/Input.jsx
================================================
import React from 'react';

const Input = ({
  label,
  icon,
  error,
  className = "",
  ...props
}) => {
  return (
    <div className="space-y-1">
      {label && (
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
          {label}
        </label>
      )}
      <div className="relative">
        {icon && (
          <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500 dark:text-gray-400">
            {icon}
          </span>
        )}
        <input
          className={`w-full ${icon ? 'pl-10' : 'pl-3'} pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-gray-200 ${error ? 'border-red-500 dark:border-red-500' : ''} ${className}`}
          {...props}
        />
      </div>
      {error && (
        <p className="text-sm text-red-600 dark:text-red-400">{error}</p>
      )}
    </div>
  );
};

export default Input;




================================================
File: src/components/common/Modal.jsx
================================================
import React, { useEffect } from 'react';

export const Modal = ({ isOpen, onClose, children, title }) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = 'unset';
    }
    
    return () => {
      document.body.style.overflow = 'unset';
    };
  }, [isOpen]);
  
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fadeIn">
      <div className="relative p-6 rounded-lg shadow-lg w-full max-w-sm mx-auto bg-white dark:bg-gray-800 animate-slideUp">
        {title && (
          <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">{title}</h2>
        )}
        
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          aria-label="Close"
        >
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        
        {children}
      </div>
    </div>
  );
};


================================================
File: src/components/common/Notification.jsx
================================================
import React, { useEffect } from 'react';

export const Notification = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      if (onClose) onClose();
    }, 5000);
    
    return () => clearTimeout(timer);
  }, [onClose]);
  
  const types = {
    success: {
      bgColor: "bg-green-50 dark:bg-green-900/30",
      textColor: "text-green-800 dark:text-green-200",
      borderColor: "border-green-200 dark:border-green-800",
      icon: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )
    },
    error: {
      bgColor: "bg-red-50 dark:bg-red-900/30",
      textColor: "text-red-800 dark:text-red-200",
      borderColor: "border-red-200 dark:border-red-800",
      icon: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )
    },
    info: {
      bgColor: "bg-blue-50 dark:bg-blue-900/30",
      textColor: "text-blue-800 dark:text-blue-200", 
      borderColor: "border-blue-200 dark:border-blue-800",
      icon: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )
    },
    warning: {
      bgColor: "bg-yellow-50 dark:bg-yellow-900/30", 
      textColor: "text-yellow-800 dark:text-yellow-200",
      borderColor: "border-yellow-200 dark:border-yellow-800",
      icon: (
        <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      )
    }
  };
  
  const typeStyles = types[type] || types.info;
  
  return (
    <div 
      className={`fixed top-4 right-4 p-3 rounded-lg shadow-lg border flex items-start max-w-xs animate-slideIn z-50
        ${typeStyles.bgColor} ${typeStyles.textColor} ${typeStyles.borderColor}`}
    >
      <div className="mr-3 mt-0.5 flex-shrink-0">
        {typeStyles.icon}
      </div>
      <div className="flex-1 pr-6">
        <p className="text-sm font-medium">{message}</p>
      </div>
      <button 
        onClick={onClose} 
        className="absolute top-3 right-3 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300"
      >
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  );
};


================================================
File: src/components/features/auth/AuthScreen.jsx
================================================
import React from 'react';
import { useAuth } from '../../../contexts/AuthContext';
import Button from '../../common/Button';

export const AuthScreen = () => {
  const { setShowPinModal } = useAuth();
  
  return (
    <div className="flex flex-col h-full justify-center items-center">
      <div className="text-center">
        <div className="flex justify-center mb-6">
          <img
            src="icons/icon128.png"
            className="w-24 h-24 object-contain"
            alt="E-SBSL Logo"
          />
        </div>
        <h2 className="text-xl font-semibold mb-2 text-gray-800 dark:text-gray-200">E-SBSL</h2>
        <p className="text-sm text-gray-500 dark:text-gray-400 mb-6">
          Secure document operations with e-signature
        </p>
      </div>
      
      <Button
        onClick={() => setShowPinModal(true)}
        className="px-8"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
          </svg>
        }
      >
        Log in with E-Signature
      </Button>
    </div>
  );
};


================================================
File: src/components/features/auth/PinModal.jsx
================================================
import React from 'react';
import { useAuth } from '../../../contexts/AuthContext';
import { Modal } from '../../common/Modal';
import Button from '../../common/Button';
import Input from '../../common/Input';

export const PinModal = () => {
  const { 
    showPinModal, 
    pin, 
    setPin, 
    setShowPinModal, 
    handlePinSubmit,
    handleLogout, 
    isAuthenticating,
    isAuthenticated
  } = useAuth();

  const handleCancel = () => {
    setShowPinModal(false);
    
    // If not authenticated (timeout has occurred), log out
    if (!isAuthenticated) {
      handleLogout();
    }
  };
  
  return (
    <Modal isOpen={showPinModal} onClose={handleCancel} title="Enter PIN">
      <div className="space-y-4">
        <Input
          type="password"
          maxLength="6"
          placeholder="Enter PIN"
          value={pin}
          onChange={(e) => setPin(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              handlePinSubmit();
            }
          }}
          icon={
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
            </svg>
          }
        />
        
        <div className="flex justify-end space-x-2 mt-6">
          <Button
            variant="outline"
            onClick={handleCancel}
          >
            Cancel
          </Button>
          <Button
            onClick={handlePinSubmit}
            isLoading={isAuthenticating}
          >
            Login
          </Button>
        </div>
      </div>
    </Modal>
  );
};


================================================
File: src/components/features/encryption/EncryptionTab.jsx
================================================
import React from 'react';
import { useEncryption } from '../../../hooks/useEncryption';
import Card from '../../common/Card';

export const EncryptionTab = () => {
  const { handleEncryptForSelf, handleEncryptForSomeone, handleDecrypt } = useEncryption();

  return (
    <div className="grid grid-cols-1 gap-4">
      <Card 
        title="Encrypt for Yourself"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        }
        description="Encrypt a document with your own key"
        actionText="Select Document"
        onAction={handleEncryptForSelf}
      />
      
      <Card 
        title="Encrypt for Someone"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        }
        description="Encrypt a document with someone else's public key"
        actionText="Select Document"
        onAction={handleEncryptForSomeone}
      />
      
      <Card 
        title="Decrypt Document"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z" />
          </svg>
        }
        description="Decrypt an encrypted document with a key file"
        actionText="Select Document & Key"
        onAction={handleDecrypt}
      />
    </div>
  );
};


================================================
File: src/components/features/gmail/ComposeModal.jsx
================================================
// src/components/features/gmail/ComposeModal.jsx
import React, { useState } from 'react';
import { Modal } from '../../common/Modal';
import { useNotification } from '../../../contexts/NotificationContext';

export const ComposeModal = ({ onClose }) => {
  const [recipients, setRecipients] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [isSending, setIsSending] = useState(false);
  
  const { showNotification } = useNotification();

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email.trim());
  };

  const validateForm = () => {
    // Check for recipients
    if (!recipients.trim()) {
      showNotification('Please enter at least one recipient', 'error');
      return false;
    }
    
    // Validate email format
    const emails = recipients.split(',').map(email => email.trim());
    for (const email of emails) {
      if (!validateEmail(email)) {
        showNotification(`"${email}" is not a valid email address`, 'error');
        return false;
      }
    }
    
    // Check for subject
    if (!subject.trim()) {
      showNotification('Please enter a subject', 'error');
      return false;
    }
    
    // Check for message content
    if (!message.trim()) {
      showNotification('Please enter a message', 'error');
      return false;
    }
    
    return true;
  };

  const handleSend = () => {
    if (!validateForm()) {
      return;
    }

    setIsSending(true);
    
    // Send email using background script
    chrome.runtime.sendMessage({
      action: 'sendEmail',
      to: recipients,
      subject: subject,
      body: message
    }, (response) => {
      setIsSending(false);
      
      if (response && response.success) {
        showNotification('Email sent successfully', 'success');
        setTimeout(() => onClose(), 1500); // Close after notification is shown
      } else {
        showNotification(`Failed to send email: ${response?.error || 'Unknown error'}`, 'error');
      }
    });
  };

  return (
    <Modal isOpen={true} onClose={onClose}>
      <div className="space-y-4">
        <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-200">Compose Secure Email</h2>
        
        <div className="space-y-3">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Recipients:
            </label>
            <input
              type="text"
              value={recipients}
              onChange={(e) => setRecipients(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600"
              placeholder="example@gmail.com, another@gmail.com"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Subject:
            </label>
            <input
              type="text"
              value={subject}
              onChange={(e) => setSubject(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600"
              placeholder="Email subject"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Message:
            </label>
            <textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600"
              rows="6"
              placeholder="Your message..."
            />
          </div>
        </div>
        
        <div className="flex justify-end space-x-2 mt-4">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-600 hover:text-gray-800 rounded-lg transition-colors duration-200 ease-in-out dark:text-gray-300 dark:hover:text-gray-100"
            disabled={isSending}
          >
            Cancel
          </button>
          <button
            onClick={handleSend}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 ease-in-out"
            disabled={isSending}
          >
            {isSending ? (
              <>
                <span className="inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></span>
                Sending...
              </>
            ) : 'Send Email'}
          </button>
        </div>
      </div>
    </Modal>
  );
};


================================================
File: src/components/features/gmail/GmailTab.jsx
================================================
import React, { useState, useEffect } from 'react';
import { useNotification } from '../../../contexts/NotificationContext';
import { ComposeModal } from './ComposeModal';
import Card from '../../common/Card';

export const GmailTab = ({ directCompose = false, onComposeShown }) => {
  const [showComposeModal, setShowComposeModal] = useState(false);
  const { showNotification } = useNotification();

  useEffect(() => {
    if (directCompose) {
      console.log('Direct compose flag detected, opening compose modal');
      handleComposeEmail();
      if (onComposeShown && typeof onComposeShown === 'function') {
        onComposeShown();
      }
    }
  }, [directCompose]);

  const handleComposeEmail = () => {
    chrome.runtime.sendMessage({ action: 'authenticate' }, (response) => {
      if (response && response.success) {
        setShowComposeModal(true);
      } else {
        showNotification('Gmail authentication failed: ' + (response?.error || 'Unknown error'), 'error');
      }
    });
  };

  return (
    <div className="space-y-4">
      <Card 
        title="Compose Secure Email"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
        }
        description="Send encrypted email with attachments through Gmail"
        actionText="Compose Email"
        onAction={handleComposeEmail}
      />
      
      {showComposeModal && (
        <ComposeModal onClose={() => setShowComposeModal(false)} />
      )}
    </div>
  );
};


================================================
File: src/components/features/server/ServerTab.jsx
================================================
import React, { useState } from 'react';
import serverApi from './serverCommunication';
import { FaClipboard } from 'react-icons/fa';
import { useNotification } from '../../../contexts/NotificationContext';
import Input from '../../common/Input';
import Button from '../../common/Button';
import Card from '../../common/Card';

export const ServerTab = () => {
  const { showNotification } = useNotification();
  const [nameGetData, setNameGetData] = useState('');
  const [nameSaveData, setNameSaveData] = useState('');
  const [key, setKey] = useState('');
  const [resultMessage, setResultMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSaveKey = async () => {
    if (!nameSaveData || !key) {
      showNotification('Please enter both name and key', 'warning');
      return;
    }
    
    setIsLoading(true);
    try {
      const result = await serverApi.sendMessageToServer(
        'database',
        'savePublicKey',
        JSON.stringify({ name: nameSaveData, key })
      );
      console.log('handleSaveKey result: ', result);

      if (result.message === 'Success') {
        setResultMessage({ type: 'success', message: 'Saved key successfully!' });
        showNotification('Key saved successfully', 'success');
      } else {
        setResultMessage({ type: 'error', message: result.message });
        showNotification('Failed to save key: ' + result.message, 'error');
      }
    } catch (error) {
      console.error('Error in handleSaveKey:', error);
      setResultMessage({ type: 'error', message: 'Failed to save key.' });
      showNotification('Error saving key', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetKey = async () => {
    if (!nameGetData) {
      showNotification('Please enter a name', 'warning');
      return;
    }
    
    setIsLoading(true);
    try {
      const result = await serverApi.sendMessageToServer(
        'database',
        'getPublicKey',
        JSON.stringify({ name: nameGetData })
      );
      console.log('handleGetKey result: ', result);
      
      if (result.message === 'Success') {
        setResultMessage({
          type: 'key',
          name: nameGetData,
          key: result.key,
        });
        showNotification('Key retrieved successfully', 'success');
      } else {
        setResultMessage({ type: 'error', message: 'Failed to get key: ' + result.message });
        showNotification('Failed to get key', 'error');
      }
    } catch (error) {
      console.error('Error in handleGetKey:', error);
      setResultMessage({ type: 'error', message: 'Failed to fetch key.' });
      showNotification('Error retrieving key', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text).then(() => {
      showNotification('Key copied to clipboard!', 'success');
    }).catch((error) => {
      console.error('Failed to copy: ', error);
      showNotification('Failed to copy to clipboard', 'error');
    });
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm">
        <h3 className="font-medium mb-4 text-gray-800 dark:text-gray-200">Get Public Key</h3>
        
        <div className="space-y-4">
          <Input
            label="User Name"
            placeholder="Enter Name"
            value={nameGetData}
            onChange={(e) => setNameGetData(e.target.value)}
            icon={
              <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            }
          />
          
          <Button
            onClick={handleGetKey}
            isLoading={isLoading}
            fullWidth
          >
            Get Key
          </Button>
        </div>
      </div>
      
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm">
        <h3 className="font-medium mb-4 text-gray-800 dark:text-gray-200">Register Public Key</h3>
        
        <div className="space-y-4">
          <Input
            label="User Name"
            placeholder="Enter Name"
            value={nameSaveData}
            onChange={(e) => setNameSaveData(e.target.value)}
            icon={
              <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            }
          />
          
          <Input
            label="Public Key"
            placeholder="Enter Key"
            value={key}
            onChange={(e) => setKey(e.target.value)}
            icon={
              <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
              </svg>
            }
          />
          
          <Button
            onClick={handleSaveKey}
            isLoading={isLoading}
            fullWidth
          >
            Register Key
          </Button>
        </div>
      </div>

      {resultMessage && (
        <div className="mt-4 p-4 border rounded-lg bg-white dark:bg-gray-800 dark:border-gray-700 shadow-sm relative">
          {resultMessage.type === 'key' ? (
            <>
              <h4 className="font-medium mb-2 text-gray-800 dark:text-gray-200">Key Details</h4>
              <p className="text-sm mb-1"><span className="font-medium">Name:</span> {resultMessage.name}</p>
              <div className="relative">
                <p className="text-sm font-medium mb-1">Key:</p>
                <div className="bg-gray-100 dark:bg-gray-700 p-2 rounded-md overflow-x-auto">
                  <p className="text-xs text-gray-700 dark:text-gray-300 break-all pr-10">{resultMessage.key}</p>
                  <button
                    onClick={() => copyToClipboard(resultMessage.key)}
                    className="absolute top-2 right-2 p-1.5 text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 rounded-md hover:bg-blue-100 dark:hover:bg-blue-900/30"
                    aria-label="Copy key"
                  >
                    <FaClipboard size={16} />
                  </button>
                </div>
              </div>
            </>
          ) : resultMessage.type === 'success' ? (
            <p className="text-green-600 dark:text-green-400">{resultMessage.message}</p>
          ) : (
            <p className="text-red-600 dark:text-red-400">{resultMessage.message}</p>
          )}
        </div>
      )}
    </div>
  );
};




================================================
File: src/components/features/server/serverCommunication.js
================================================

const serverDomain = 'https://getauth.com.tr:3030';

async function fetchDataFromServer(dataLocation) {
    const url = serverDomain + '/' + dataLocation;
    try {
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Received Data:', data);
        return data;
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

async function sendDataToServer(dataLocation, payload) {
    const url = serverDomain + '/' + dataLocation;
    console.log("url: " + url);
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload),
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Server Response:', data);
        return data;
    } catch (error) {
        console.error('Error sending data:', error);
    }
}

const serverApi = {
  sendMessageToServer: async (module, method, params = {}) => {
    try {
      console.log(`Sending message to server - Module: ${module}, Method: ${method}, Params:`, params);

      const message = {
        module,
        method,
        params,
      };

      let url = 'api/data';
      if (module === 'database') {
        if (method === 'getPublicKey') {
          url = 'api/getPublicKey';
        } else if (method === 'savePublicKey') {
          url = 'api/savePublicKey';
        }
      }
      console.log('url: ' + url);
      console.log('JSON.stringify(message): ' + JSON.stringify(message));
      console.log('message: ' + message);


      const response = await sendDataToServer(url, message);
      return response;

    } catch (error) {
      console.error('Error sending message to server:', error);
      throw error;
    }
  },

  fetchMessageFromServer: async (module, method, params = {}) => {
    try {
      const message = {
        module,
        method,
        params,
      };

      const url = 'api/data'; 

      const response = await fetchDataFromServer(url); 
      return response;

    } catch (error) {
      console.error('Error fetching message from server:', error);
      throw error;
    }
  },
};

export default serverApi;




================================================
File: src/components/features/settings/SettingsTab.jsx
================================================
import React, {useState, useEffect} from 'react';
import { useTheme } from '../../../contexts/ThemeContext';
import { useAuth } from '../../../contexts/AuthContext';
import Input from '../../common/Input';
import Button from '../../common/Button';

export const SettingsTab = () => {
  const { darkMode, toggleDarkMode } = useTheme();
  const { handleLogout } = useAuth();
  const [timeoutDuration, setTimeoutDuration] = useState(1);

  useEffect(() => {
    chrome.storage.local.get('timeoutDuration', (data) => {
      if (data.timeoutDuration) {
        setTimeoutDuration(data.timeoutDuration);
      }
    });
  }, []);

  const handleTimeoutChange = (event) => {
    const newTimeout = Number(event.target.value);
    setTimeoutDuration(newTimeout);

    chrome.storage.local.set({ timeoutDuration: newTimeout }, () => {
      chrome.runtime.sendMessage({ action: 'updateTimeout', timeoutDuration: newTimeout });
    });
  };

  return (
    <div className="space-y-6">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm">
        <h3 className="font-medium mb-4 text-gray-800 dark:text-gray-200">Display Settings</h3>
        
        <div className="flex items-center justify-between py-2">
          <span className="text-sm text-gray-700 dark:text-gray-300">Dark Mode</span>
          <button
            onClick={toggleDarkMode}
            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
              ${darkMode ? 'bg-blue-600' : 'bg-gray-200'}`}
          >
            <span
              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform
                ${darkMode ? 'translate-x-6' : 'translate-x-1'}`}
            />
          </button>
        </div>
      </div>
      
      <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm">
        <h3 className="font-medium mb-4 text-gray-800 dark:text-gray-200">Security Settings</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Timeout Duration (minutes)
            </label>
            <Input
              type="number"
              value={timeoutDuration}
              onChange={handleTimeoutChange}
              min="1"
              icon={
                <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              }
            />
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              The extension will automatically log out after this period of inactivity
            </p>
          </div>
        </div>
      </div>
      
      <Button
        onClick={handleLogout}
        variant="danger"
        fullWidth={true}
        icon={
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
          </svg>
        }
      >
        Logout
      </Button>
    </div>
  );
};


================================================
File: src/components/features/signing/SigningTab.jsx
================================================
import React from 'react';
import { useSigning } from '../../../hooks/useSigning';
import Card from '../../common/Card';

export const SigningTab = () => {
  const { handleSignDocument, handleVerifySignature } = useSigning();

  return (
    <div className="grid grid-cols-1 gap-4">
      <Card 
        title="Sign Document"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
          </svg>
        }
        description="Securely sign documents using your e-signature"
        actionText="Select Document"
        onAction={handleSignDocument}
      />
      
      <Card 
        title="Verify Signature"
        icon={
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
          </svg>
        }
        description="Validate the authenticity of signed documents"
        actionText="Verify Document"
        onAction={handleVerifySignature}
      />
    </div>
  );
};


================================================
File: src/components/layout/Header.jsx
================================================
import React from 'react';
import { useTheme } from '../../contexts/ThemeContext';
import { useAuth } from '../../contexts/AuthContext';

const Header = () => {
  const { darkMode, toggleDarkMode } = useTheme();
  const { handleLogout } = useAuth();

  return (
    <div className="flex items-center justify-between mb-6 pb-3 border-b dark:border-gray-700">
      <div className="flex items-center">
        <img src="icons/icon48.png" alt="E-SBSL Logo" className="w-8 h-8" />
        <h1 className="ml-2 text-lg font-semibold text-gray-800 dark:text-gray-200">E-SBSL</h1>
      </div>
      <div className="flex items-center space-x-2">
        {/* Theme Toggle */}
        <button
          onClick={toggleDarkMode}
          className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"
          aria-label={darkMode ? "Switch to light mode" : "Switch to dark mode"}
        >
          {darkMode ? (
            <svg className="w-5 h-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
            </svg>
          ) : (
            <svg className="w-5 h-5 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
            </svg>
          )}
        </button>
        
        {/* Logout Button */}
        <button 
          onClick={handleLogout}
          className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-400"
          aria-label="Logout"
        >
          <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
          </svg>
        </button>
      </div>
    </div>
  );
};

export default Header;





================================================
File: src/components/layout/TabNavigation.jsx
================================================
import React from 'react';

const TabNavigation = ({ activeTab, onTabChange }) => {
  // Function to get appropriate icon for each tab
  const getTabIcon = (tab) => {
    switch (tab) {
      case 'Signing':
        return (
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
          </svg>
        );
      case 'Encryption':
        return (
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        );
      case 'Gmail':
        return (
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
        );
      case 'Settings':
        return (
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
        );
      case 'Server':
        return (
          <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
          </svg>
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex border-b dark:border-gray-700 mb-4 overflow-x-auto hide-scrollbar">
      {['Signing', 'Encryption', 'Gmail', 'Server' , 'Settings'].map((tab) => (
        <button
          key={tab}
          className={`px-4 py-3 text-sm font-medium transition-all duration-200 border-b-2 flex items-center whitespace-nowrap ${
            activeTab === tab 
              ? 'border-blue-500 text-blue-600 dark:text-blue-400' 
              : 'border-transparent text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
          }`}
          onClick={() => onTabChange(tab)}
        >
          <span className="mr-1.5">{getTabIcon(tab)}</span>
          <span>{tab}</span>
        </button>
      ))}
    </div>
  );
};

export default TabNavigation;




================================================
File: src/contexts/AuthContext.jsx
================================================
// src/contexts/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import browserApi from '../utils/browserApi';
import { useNotification } from '../hooks/useNotification';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [showPinModal, setShowPinModal] = useState(false);
  const [pin, setPin] = useState('');
  const [timeoutReached, setTimeoutReached] = useState(false); 
  const { showNotification } = useNotification();

  const [isBackgroundConnected, setIsBackgroundConnected] = useState(true);


  const resetTimer = () => {
    try {
      chrome.runtime.sendMessage({ action: 'resetTimer' }, (response) => {
        if (chrome.runtime.lastError) {
          console.log("Connection error:", chrome.runtime.lastError.message);
          setIsBackgroundConnected(false);
          return;
        }
        console.log(response ? response.status : "No response");
      });
    } catch (error) {
      console.error("Error sending resetTimer message:", error);
    }
  };

  const handlePinSubmit = async () => {
    try {
      const response = await browserApi.verifyPIN(pin);
      if (response.success) {
        resetTimer();
        setShowPinModal(false);
        setIsAuthenticated(true);
        showNotification('Logged in successfully', 'success');
        setPin('');
      } else {
        showNotification('Wrong PIN', 'error');
      }
    } catch (error) {
      console.error('Error verifying PIN:', error);
      showNotification('Error logging in', 'error');
    }
  };

  const handleLogout = async () => {
    try {
      setIsAuthenticated(false);
      const response = await browserApi.logout();
      if (response.success) {
        showNotification('Logged out successfully', 'info');
      } else {
        console.log("Failed to logout: " + response);
      }
    } catch (error) {
      console.error("Error during logout:", error);
      // Still set isAuthenticated to false even if API call fails
      setIsAuthenticated(false);
    }
  };

  useEffect(() => {
    const handleTimeoutMessage = (message) => {
      if (message.timeoutReached) {
        // Instead of setting a separate flag, just log the user out
        setIsAuthenticated(false);
        setShowPinModal(true);
      }
    };

    try {
      chrome.runtime.onMessage.addListener(handleTimeoutMessage);
    } catch (error) {
      console.error("Error adding message listener:", error);
    }

    return () => {
      try {
        chrome.runtime.onMessage.removeListener(handleTimeoutMessage);
      } catch (error) {
        console.error("Error removing message listener:", error);
      }
    };
  }, []);

  return (
    <AuthContext.Provider 
      value={{
        isAuthenticated,
        showPinModal,
        pin,
        setIsAuthenticated,
        setShowPinModal,
        setPin,
        handlePinSubmit,
        handleLogout
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


================================================
File: src/contexts/NotificationContext.jsx
================================================
// src/contexts/NotificationContext.jsx
import React, { createContext, useContext, useState } from 'react';

const NotificationContext = createContext(null);

export const NotificationProvider = ({ children }) => {
  const [notification, setNotification] = useState(null);

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
  };

  return (
    <NotificationContext.Provider value={{ notification, showNotification, setNotification }}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};




================================================
File: src/contexts/ThemeContext.jsx
================================================
// src/contexts/ThemeContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';

const ThemeContext = createContext(null);

export const ThemeProvider = ({ children }) => {
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    const storedDarkMode = localStorage.getItem('darkMode') === 'true';
    setDarkMode(storedDarkMode);
  }, []);

  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('darkMode', darkMode);
  }, [darkMode]);

  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
  };

  return (
    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};


================================================
File: src/hooks/useEncryption.js
================================================
// src/hooks/useEncryption.js
import { useFileSelection } from './useFileSelection';
import { useNotification } from '../contexts/NotificationContext';
import browserApi from '../utils/browserApi';

export const useEncryption = () => {
  const { handleFileSelection } = useFileSelection();
  const { showNotification } = useNotification();

  const handleEncryptForSelf = () => {
    handleFileSelection('*.*', async (file) => {
      try {
        console.log('Encrypting file for self:', file.name); // Debug log
        const response = await browserApi.encryptData(file.name);
        console.log('Encryption response:', response); // Debug log
        
        if (response.success) {
          showNotification('Document encrypted successfully for yourself', 'success');
        } else {
          showNotification(response.message || 'Failed to encrypt document', 'error');
        }
      } catch (error) {
        console.error('Error encrypting document:', error);
        showNotification('Error encrypting document', 'error');
      }
    });
  };

  const handleEncryptForSomeone = async () => {
    try {
      // First, select the file to encrypt
      showNotification('Select the file to encrypt', 'info');
      const fileToEncrypt = await new Promise((resolve) => {
        handleFileSelection('*.*', (file) => resolve(file));
      });

      // Then, select the public key file
      showNotification('Now select the public key file', 'info');
      const keyFile = await new Promise((resolve) => {
        handleFileSelection('.key,.pub', (file) => resolve(file));
      });

      console.log('Encrypting file for someone:', fileToEncrypt.name, 'with key:', keyFile.name); // Debug log
      const response = await browserApi.encryptWithPubkey(fileToEncrypt.name, keyFile.name);
      console.log('Encryption with pubkey response:', response); // Debug log

      if (response.success) {
        showNotification('Document encrypted successfully for recipient', 'success');
      } else {
        showNotification(response.message || 'Failed to encrypt document for recipient', 'error');
      }
    } catch (error) {
      console.error('Error encrypting document for someone:', error);
      showNotification('Error encrypting document for recipient', 'error');
    }
  };

  const handleDecrypt = async () => {
    handleFileSelection('*.*', async (file) => {
      handleFileSelection('*.*', async (keyFile) => {
        try {
          console.log('Decrypting file:', file.name, 'with key:', keyFile.name); // Debug log
          const response = await browserApi.decryptData(file.name, keyFile.name);
          console.log('Decryption response:', response); // Debug log

          if (response.success) {
            showNotification('Document decrypted successfully', 'success');
          } else {
            showNotification(response.message || 'Failed to decrypt document', 'error');
          }
        } catch (error) {
          console.error('Error decrypting document:', error);
          showNotification('Error decrypting document', 'error');
        }
      });
    });
  };

  return { handleEncryptForSelf, handleEncryptForSomeone, handleDecrypt };
};




================================================
File: src/hooks/useFileSelection.js
================================================
// src/hooks/useFileSelection.js
export const useFileSelection = () => {
    const handleFileSelection = (accept, callback) => {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = accept;
      input.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
          callback(file);
        }
      };
      input.click();
    };
  
    return { handleFileSelection };
  };

  


================================================
File: src/hooks/useGmail.js
================================================
import { useNotification } from '../contexts/NotificationContext';

export const useGmail = () => {
  const { showNotification } = useNotification();

  const authenticateGmail = () => {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage({ action: 'authenticate' }, (response) => {
        if (response && response.success) {
          resolve(response.token);
        } else {
          showNotification('Gmail authentication failed: ' + (response?.error || 'Unknown error'), 'error');
          reject(new Error(response?.error || 'Authentication failed'));
        }
      });
    });
  };

  const sendEmail = (to, subject, body) => {
    return new Promise((resolve, reject) => {
      chrome.runtime.sendMessage({
        action: 'sendEmail',
        to,
        subject,
        body
      }, (response) => {
        if (response && response.success) {
          showNotification('Email sent successfully', 'success');
          resolve(response.result);
        } else {
          showNotification(`Failed to send email: ${response?.error || 'Unknown error'}`, 'error');
          reject(new Error(response?.error || 'Send failed'));
        }
      });
    });
  };

  return { authenticateGmail, sendEmail };
};


================================================
File: src/hooks/useNotification.js
================================================
// src/hooks/useNotification.js
import { useState } from 'react';

export const useNotification = () => {
  const [notification, setNotification] = useState(null);

  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 3000);
  };

  return { notification, showNotification, setNotification };
};




================================================
File: src/hooks/useSigning.js
================================================
// src/hooks/useSigning.js
import { useFileSelection } from './useFileSelection';
import { useNotification } from '../contexts/NotificationContext'; // NotificationContext'ten import ediyoruz
import browserApi from '../utils/browserApi';

export const useSigning = () => {
  const { handleFileSelection } = useFileSelection();
  const { showNotification } = useNotification();

  const handleSignDocument = () => {
    handleFileSelection('*.*', async (file) => {
      try {
        console.log('Signing file:', file.name); // Debug log
        const response = await browserApi.signDocument(file.name);
        console.log('Signing response:', response); // Debug log

        if (response.success) {
          showNotification('Document signed successfully', 'success');
        } else {
          showNotification(response.message || 'Failed to sign document', 'error');
        }
      } catch (error) {
        console.error('Error signing document:', error);
        showNotification('Error signing document', 'error');
      }
    });
  };

  const handleVerifySignature = () => {
    handleFileSelection('*.*', async (file) => {
      // Sonra imza dosyasını seç
      handleFileSelection('*.*', async (signatureFile) => {
        try {
          console.log('Verifying file:', file.name, 'with signature:', signatureFile.name); // Debug log
          const response = await browserApi.verifySignature(file.name, signatureFile.name);
          console.log('Verification response:', response); // Debug log

          if (response.success) {
            showNotification('Signature is valid', 'success');
          } else {
            showNotification(response.message || 'Invalid signature', 'error');
          }
        } catch (error) {
          console.error('Error verifying signature:', error);
          showNotification('Error verifying signature', 'error');
        }
      });
    });
  };

  return { handleSignDocument, handleVerifySignature };
};




================================================
File: src/pages/Popup.js
================================================
// src/pages/Popup.js
import React from 'react';
import { createRoot } from 'react-dom/client';
import ExtensionUI from '../components/ExtensionUI';
import { AuthProvider } from '../contexts/AuthContext';
import { ThemeProvider } from '../contexts/ThemeContext';
import { NotificationProvider } from '../contexts/NotificationContext';
import '../styles/tailwind.css';

const AppProviders = ({ children }) => {
  return (
    <NotificationProvider>
      <AuthProvider>
        <ThemeProvider>
          {children}
        </ThemeProvider>
      </AuthProvider>
    </NotificationProvider>
  );
};

const container = document.getElementById('root');
const root = createRoot(container);
root.render(
  <AppProviders>
    <ExtensionUI />
  </AppProviders>
);


// Listen for messages to automatically open Gmail compose
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'openGmailCompose') {
    console.log('Received request to open Gmail compose tab');
    
    window.directOpenGmailCompose = true;
    
    sendResponse({ success: true });
    return true;
  }
});



================================================
File: src/styles/tailwind.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom animations */
@keyframes slideIn {
  0% { transform: translateY(-20px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}

@keyframes slideUp {
  0% { transform: translateY(20px); opacity: 0; }
  100% { transform: translateY(0); opacity: 1; }
}

@keyframes fadeIn {
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.animate-slideIn {
  animation: slideIn 0.3s ease-out;
}

.animate-slideUp {
  animation: slideUp 0.3s ease-out;
}

.animate-fadeIn {
  animation: fadeIn 0.2s ease-out;
}

/* Hide scrollbar but allow scrolling */
.hide-scrollbar {
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

.hide-scrollbar::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}


================================================
File: src/utils/browserApi.js
================================================
const browserApi = (() => {
  let port = null;

  // Function to initialize the connection
  const connectToNativeHost = () => {
      if (!port) {
          port = chrome.runtime.connectNative('com.esbsl.native_host');

          port.onMessage.addListener((message) => {
              console.log('Received from native:', message);
          });

          port.onDisconnect.addListener(() => {
              console.warn('Native host disconnected');
              port = null; // Reset the port when disconnected
          });
      }
  };
  return {
    sendMessageToNative: async (module, method, params = {}) => {
        try {
            console.log(`Sending message to native host - Module: ${module}, Method: ${method}`);
            
            const message = {
                module,
                method,
                params
            };

            connectToNativeHost(); // Ensure connection is open

            return new Promise((resolve, reject) => {
                if (port) {
                    port.postMessage(message);
                    port.onMessage.addListener(function listener(response) {
                        console.log('Native host response:', response);
                        port.onMessage.removeListener(listener); // Remove listener after response
                        resolve(response);
                    });
                } else {
                    reject(new Error('Failed to connect to native host'));
                }
            });
        } catch (error) {
            console.error('Native message error:', error);
            throw error;
        }
    },

    verifyPIN: async (pin) => {
      return await browserApi.sendMessageToNative(
        'auth',
        'login',
        { pin }
      );
    },

    logout: async () => {
      return await browserApi.sendMessageToNative(
        'auth',
        'logout'
      );
    },
  
    signDocument: async (filename) => {
      return await browserApi.sendMessageToNative(
        'sign',
        'sign_method',
        {filename}
      );
    },
  
    encryptData: async (filename) => {
      return await browserApi.sendMessageToNative(
        'encrypt',
        'encrypt_method',
        {filename}
      );
    },

    decryptData: async (filename, keyfile) => {
        return await browserApi.sendMessageToNative(
          'encrypt',
          'decrypt_method',
          {filename, keyfile}
        );
    },

    verifySignature: async (filename, signature) => {
        return await browserApi.sendMessageToNative(
            'sign',
            'verify_method',
            {filename, signature}
        );
    },

    savePubkey: async (file) => {
        return await browserApi.sendMessageToNative(
            'save',
            'pub_key',
            {file}
        );
    },

    encryptWithPubkey: async (filename, keypath) => {
        return await browserApi.sendMessageToNative(
            'encrypt',
            'encrypt_method_pk',
            {filename, keypath}
        );
    }

  };
})();
  
  export default browserApi;



