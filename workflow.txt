User Selects File (in Extension UI)

User clicks the file input and selects hello.txt.

File Data (Conceptual): The raw binary content of hello.txt is just the bytes representing "Hello World!".

UI Reads File (using FileReader)

The handleFileChange function uses reader.readAsDataURL(file).

FileReader Output (Data URL): data:text/plain;base64,SGVsbG8gV29ybGQh

The UI code extracts the part after base64,.

Attachment Data (Level 1 Base64 Encoded): SGVsbG8gV29ybGQh
(This is the Base64 representation of "Hello World!")

UI Sends Message to Background Script

User clicks "Send". The UI gathers all data.

Data Sent (chrome.runtime.sendMessage payload):

{
  "action": "sendEmail",
  "to": "recipient@example.com",
  "subject": "Test Subject",
  "body": "This is the email body.",
  "attachments": [
    {
      "filename": "hello.txt",
      "mimeType": "text/plain",
      "content": "SGVsbG8gV29ybGQh" // Level 1 encoded content
    }
  ]
}


Background Script Constructs Raw MIME Message

The sendEmail function receives the data above.

It builds the multipart/mixed string, inserting the Level 1 encoded content (SGVsbG8gV29ybGQh) into the attachment part.

Raw MIME String (email variable):

To: recipient@example.com
Subject: Test Subject
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="----=Boundary_12345"

------=Boundary_12345
Content-Type: text/plain; charset="UTF-8"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

This is the email body.

------=Boundary_12345
Content-Type: text/plain
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename*=UTF-8''hello.txt

SGVsbG8gV29ybGQh

------=Boundary_12345--


(Note: Line endings should technically be \r\n)

Background Script Encodes MIME for API (Level 2)

The entire Raw MIME String from step 4 is encoded using Base64URL.

Base64URL Encoded String (encodedEmail variable):
(A long string representing the entire text above, encoded using Base64URL. It will start something like: VG86IHJlY2lwaWVudEBleGFtcGxlLmNvbQ0KU3ViamVjdDogVGVzdCBTdWJqZWN0DQpNSU1FLVZlcnNpb246IDEuMA0KQ29udG...)

Background Script Calls Gmail API

A fetch request is made to https://www.googleapis.com/gmail/v1/users/me/messages/send.

API Request Body (Simplified):

{
  "raw": "(The long Base64URL string from step 5)"
}


Google Servers Process Request

Google receives the API request.

It takes the raw value (the long Base64URL string).

Google Decodes (Level 2 Decode): Google decodes the Base64URL string back into the Raw MIME String (exactly like the one in step 4).

Google sends this Raw MIME String to the recipient's email server via standard email protocols (SMTP).

Recipient's Email Client Receives Email

The client (e.g., Gmail web interface) receives the Raw MIME String (like step 4).

Recipient's Client Parses and Decodes Attachment (Level 1)

The client reads the Content-Type: multipart/mixed header and uses the boundary (----=Boundary_12345) to split the message into parts (body part, attachment part).

When processing the attachment part, it sees Content-Transfer-Encoding: base64.

Client Decodes (Level 1 Decode): The client takes the attachment's content (SGVsbG8gV29ybGQh) and performs a Base64 decode.

Decoded File Data: The result of decoding SGVsbG8gV29ybGQh is the original binary data for "Hello World!".

The client uses Content-Disposition to get the filename (hello.txt).

User Sees Email and Attachment

The recipient's email client displays the body ("This is the email body.") and shows an attachment named hello.txt, which contains the reconstructed "Hello World!" content.

This detailed flow shows how the data is transformed through the two encoding steps and how the corresponding decoding happens at the Google server and the recipient's client to correctly reconstruct the original message and file.